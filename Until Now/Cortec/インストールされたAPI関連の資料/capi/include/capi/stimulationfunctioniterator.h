/**********************************************************************
* Copyright 2015-2019, CorTec GmbH
* All rights reserved.
*
* Redistribution, modification, adaptation or translation is not permitted.
*
* CorTec shall be liable a) for any damage caused by a willful, fraudulent or grossly 
* negligent act, or resulting in injury to life, body or health, or covered by the 
* Product Liability Act, b) for any reasonably foreseeable damage resulting from 
* its breach of a fundamental contractual obligation up to the amount of the 
* licensing fees agreed under this Agreement. 
* All other claims shall be excluded. 
* CorTec excludes any liability for any damage caused by Licensee's 
* use of the Software for regular medical treatment of patients.
**********************************************************************/
#ifndef CAPI_STIMULATIONFUNCTIONITERATOR_H
#define CAPI_STIMULATIONFUNCTIONITERATOR_H

#include <capi/capi.h>
#include <capi/stimulationfunction.h>

/**
* @file stimulationfunctioniterator.h
* @brief Iterator interface to iterate through all functions of a stimulation command.
*
* A stimulation function iterator can be generated via stimulationcommand_getFunctionIterator 
* (@see stimulationcommand.h). The iterator must be destroyed via stimulationfunctioniterator_destroy once
* it is no longer needed.
*/


/** 
* Opaque type for passing IIterator<IStimulationFunction*>. Must be obtained from stimulation command 
* @see stimulationcommand.h 
*/
typedef struct _HIStimulationFunctionIterator* HIStimulationFunctionIterator; 


#ifdef __cplusplus
extern "C" {
#endif

/**
* Set iterator to next element in the container.
*
* @param[in] hStimulationFunctionIterator Handle to stimulationfunctionIterator
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationfunctioniterator_next(
    HIStimulationFunctionIterator const hStimulationFunctionIterator);

/**
* True if all elements of the container have been traversed.
*
* @param[in] hFunctionIterator Handle to stimulationfunctionIterator
* @param[out] result           True if all elements of the container have been traversed.
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationfunctioniterator_isDone(
    HIStimulationFunctionIterator const hFunctionIterator, 
    bool* const result);

/**
* Get the element the iterator is pointing to.
*
* @param[in] hStimulationFunctionIterator Handle to stimulationfunctionIterator
* @param[out] hStimulationFunction        Address of handle to stimulationfunction
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationfunctioniterator_getCurrentItem(
    HIStimulationFunctionIterator const hStimulationFunctionIterator,
    HIStimulationFunction* const hStimulationFunction);

/**
* Destroy stimulation function iterator generated by stimulationcommand_getFunctionIterator 
* (@see stimulationcommand.h).
*
* @param[in] hStimulationFunctionIterator Handle to stimulationfunctionIterator. Handle is nulled after destruction.
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationfunctioniterator_destroy(
    HIStimulationFunctionIterator* const hStimulationFunctionIterator);

#ifdef __cplusplus
}
#endif

#endif // CAPI_STIMULATIONFUNCTIONITERATOR_H