/**********************************************************************
* Copyright 2015-2019, CorTec GmbH
* All rights reserved.
*
* Redistribution, modification, adaptation or translation is not permitted.
*
* CorTec shall be liable a) for any damage caused by a willful, fraudulent or grossly 
* negligent act, or resulting in injury to life, body or health, or covered by the 
* Product Liability Act, b) for any reasonably foreseeable damage resulting from 
* its breach of a fundamental contractual obligation up to the amount of the 
* licensing fees agreed under this Agreement. 
* All other claims shall be excluded. 
* CorTec excludes any liability for any damage caused by Licensee's 
* use of the Software for regular medical treatment of patients.
**********************************************************************/
#ifndef CAPI_STIMULATIONATOMITERATOR_H
#define CAPI_STIMULATIONATOMITERATOR_H

#include <capi/capi.h>
#include <capi/stimulationatom.h>

/**
* @file stimulationatomiterator.h
* @brief Iterator interface to iterate through all atoms of a stimulation function.
*
* A stimulation atom iterator can be generated via stimulationfunction_getAtomIterator (@see stimulationfunction.h).
* The iterator must be destroyed via stimulationatomiterator_destroy once it is no longer needed.
*/

#ifdef __cplusplus
extern "C" {
#endif

/**
* Set iterator to the next element in the container.
*
* @param[in] hStimulationAtomIterator Handle to stimulationatomiterator.
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationatomiterator_next(HIStimulationAtomIterator hStimulationAtomIterator);

/**
* True if all elements of the container have been traversed.
*
* @param[in] hStimulationAtomIterator Handle to stimulationatomiterator.
* @param[out] result                  True if all elements of the container have been traversed.
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationatomiterator_isDone(HIStimulationAtomIterator hStimulationAtomIterator,
    bool* const result);

/**
* Get the element the iterator is pointing to.
*
* @param[in] hStimulationAtomIterator Handle to stimulationatomiterator.
* @param[out] hStimulationAtom        Address of handle to stimulationatom.
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationatomiterator_getCurrentItem(
    HIStimulationAtomIterator hStimulationAtomIterator,
    HIStimulationAtom* const hStimulationAtom);

/**
* Destroy stimulation atom iterator generated by stimulationfunction_getAtomIterator (@see stimulationfunction.h).
*
* @param[in] hStimulationAtomIterator Handle to stimulationatomiterator. The handle is nulled after destruction.
*
* @return Indicator for successful code execution (STATUS_OK on success)
*/
CAPI_DLL capi_status_t stimulationatomiterator_destroy(HIStimulationAtomIterator* const hStimulationAtomIterator);

#ifdef __cplusplus
}
#endif

#endif // CAPI_STIMULATIONATOMITERATOR_H